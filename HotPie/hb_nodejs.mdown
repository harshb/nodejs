#Useful Commands

1. npm list

shows the sofware installed in this application’s
immediate directory. 

2. “npm list -g” shows only the sofware that's installed globally

#install node js and NVM

1. run installer  from : http://nodejs.org/

2. to check

node --version
npm --version

3. Configure Path

on mac you may need to edit ~/.bashrc file and add to shell path
/usr/local/bin

export PATH =/usr/local/bin:$PATH

4. Home brew

 On mac if you prefer to work from source, install Homebrew

 brew update && brew install node.js

5. To  get the latest version of NPM

curl http://npmjs.org/install.sh | sh

6. install CoffeeScript locally and add it to
package.json

npm install coffee-script --save


#Chapter 2 : Express.js


Express is like Ruby's Sinatra. Express is worth installing globally so you can generate new Express applications with it.

1. Install

sudo npm install -g express

2. New Express application

express new HotPie

## To Run

1. install in directory

cd :\hotpie
npm install


2. Rename app.js

to server.js

3. npm start

## Prepare

1. Delete Public folder and copy the Public folder from Peepcodes' Final project.

2. Delete Routes dir

3. Crete an apps directory

4. in server.js add at the top:

require('coffee-script');




#Chapter 3: Authentication

I like treating a web application as a series of smaller web applications.

Create a authentication directory in apps



## View (login.jade)

1. Create folder/files

In the apps  folder create folder called views. In this views dirctory create a file: login.jade (this is the view template)

2. View code in apps/authentication/views/alogin.jade:

form(action='/sessions', method='post')
  label
    | Username
    input(type='text', name='user')
  label
    | Password
    input(type='password', name='password')
  input(type='submit', name='Submit')


## Routes

1. in Server.js

in server.js in the routes section replace:

app.get('/', routes.index);

With

require('./apps/authentication/routes')(app)


2. In server.js (line 9)

Replace:
var express = require('express')
  , routes = require('./routes');

With:

 var express = require('express');


2. in routes.rb

in authentication folder create a file: routes.rb

routes = (app) ->
  app.get '/login', (req, res) ->
    res.render "#{__dirname}/views/login",
    title: 'Login'
    stylesheet:  'login'
 module.exports = routes

# Chapter 4 : Layout

1. Global layout is in Root\views\layout.jade

Replace layout.jade with this:

!!!
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/#{stylesheet}.css')
  body
    #header
        h1= title
    != body

# Chapter 5: Development (31.12)


## Automatically restart the server using node-dev

1. install node-dev

npm install node-dev --save

2. to run 
./node_modules/node-dev/node-dev server.js

3. Create a shell script  file (called start) to run this

#! usr/bin env sh

./node_modules/node-dev/node-dev server.js

4. make it executable

chmod +x start

## Define Development Dependencies

npm has a devDependencies section node-dev should be listed there as its not required for production. Modify package.json as follows

{
  "name": "application-name",
  "version": "0.0.1",
  "private": true,
  "dependencies": {
    "express": "2.5.10",
    "jade": ">= 0.0.1",
    "coffee-script": "~1.3.3"
  
  },
  "devDependencies": {
    "node-dev": "~0.2.3"
  }

}


#Chapter 6: Easy Testing

Mocha
http://visionmedia.github.com/mocha/

##Install

1. install mocha

npm install mocha --save

2. in package.jason, move mocha entry to devDependencies section


##Tests

1. Create dir/file structure

test/app/authentication-test.coffee

2. install request

npm install request --save



3. edit package.json

in package.jason, move request  entry to devDependencies section

4. in test folder create a file _helper.js and add following code  to it

process.env.NODE_ENV = 'test';

require('coffee-script');

5. write a test in test\apps\authentication-test.coffee


assert  = require 'assert'
request = require 'request'
app     = require '../../server'

describe "authentication", ->
  describe "GET /login ", ->
    body = null
    before (done) ->
      options =
        uri: "http://localhost:3000/login"
      request options, (err, response, _body) ->
        body = _body
        done()
    it "has user field", ->
      assert.ok /user/.test(body)

6. run tests

./node_modules/mocha/bin/mocha test/_helper.js test/apps/authentication-test.coffee



## install Extras

1.  install libxmljs

npm install libxmljs --save

in package.jason, move libxmljs  entry to devDependencies section


2. assert-extra.coffee

copy this file to test folder root from PeepCode example


3. modify _helper.js

process.env.NODE_ENV = 'test';

require('coffee-script');
require(__dirname + '/assert-extra');


4. edit  test in test\apps\authentication-test.coffee



assert  = require 'assert'
request = require 'request'
app     = require '../../server'

describe "authentication", ->
  describe "GET /login ", ->
    body = null
    before (done) ->
      options =
        uri: "http://localhost:#{app.settings.port}/login"
      request options, (err, response, _body) ->
        body = _body
        done()
    it "has title", ->
      assert.hasTag body, '//head/title', 'Hot Pie - Login'

5. run tests

./node_modules/mocha/bin/mocha test/_helper.js test/apps/authentication-test.coffee


#Chapter 7: Test Support (47.5)


1. create a cmd file for running  tests

2. touch bin/test

3. make it executable

chmod +x bin/test

4. paste this in the test file

#! usr/bin env sh
./node_modules/mocha/bin/mocha test/_helper.js test/apps/authentication-test.coffee

5. to run test, type
./bin/test

6. add a script section in package.json

with value of the shell command to run:

"scripts": {
    "test": "./bin/test"
  }

7. Now you can run tests by

npm test


# Running tests on a different port 

1. modify server.js (all modifications with comment hb)
now tests are running on port 3001

/**
 * Module dependencies.
 */

require('coffee-script');

var express = require('express');

var app = module.exports = express.createServer();

// Configuration

app.configure(function(){
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  //hb
  app.set('port', 3000);
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(app.router);
  app.use(express.static(__dirname + '/public'));
});

app.configure('development', function(){
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

//hb added

app.configure('test', function(){
 app.set('port', 3001);
});

// Routes

require('./apps/authentication/routes')(app)

//hb
/*
app.listen(3000, function(){
  console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
});
*/


2. modify the test so that the uri points to:

uri: "http://localhost:#{app.settings.port}/login"

assert  = require 'assert'
request = require 'request'
app     = require '../../server'

describe "authentication", ->
  describe "GET /login ", ->
    body = null
    before (done) ->
      options =
        uri: "http://localhost:#{app.settings.port}/login"
      request options, (err, response, _body) ->
        body = _body
        done()
    it "has user field", ->
      assert.ok /user/.test(body)


# Chapter 8: sessions (54.56)


##Sessions left 59.09

1.in routes.coffee add a route

app.post '/sessions, (req,res)' ->
  if('admin' is req.body.user) and ('12345' is req.body.password)
    req.session.currentUser = req.body.user
    req.flash 'info', "you are logged in as #{req.session.currentUser}"
    res.redirect '/login'
    return
  req.flash 'error', 'Try again'
  res.redirect '/login'



2. Use Redis database for storing sessions in server.js

a) add a variable

//hb :Radis
var RedisStore = require('connect-redis')(express);

b) in a app.configure() section

//hb :Radis
  app.use(express.cookieParser());
  app.use(express.session({
    secret: "12345678",
    store: new RedisStore
   }));


3. install Redis
http://redis.io/download

for windows:
https://github.com/dmajkic/redis/

Extract the zip file. Click on redis_server.exe to start the server


4. Mac: install

1. install redis with homebrew

2. then run:

npm install redis hiredis connect-redis --save


## add flash
in views/layout.jade

  - var flashTypes = ['info', 'error']
    each flashType in flashTypes
      if flash[flashType]
        p.flash(class=flashType)
          = flash[flashType]


# add helpers:

1. in server.js

// hb: Helpers
require('./apps/helpers')(app);


2. create a new file: apps/helpers.coffee


helpers = (app) ->

  app.dynamicHelpers
    flash: (req, res) -> req.flash()
    
  app.helpers
    urlFor: (obj) ->
      if obj.id
        "/admin/pies/#{obj.id}"
      else
        "/admin/pies"
    cssClassForState: (expected, actual) ->
      if actual is expected
        [expected, 'on']
      else
        expected
    cssClassForPieAge: (pie) ->
      pieAge = (new Date).getTime() - pie.stateUpdatedAt
      minutes = (num) -> 1000 * 60 * num
      switch pie.state
        when 'making'
          if pieAge > minutes(1)
            'almost-ready'
          else
            'not-ready'
        when 'ready'
          if pieAge < minutes(1)
            'pipin-hot'
          else if pieAge < minutes(2)
            'hot'
          else
            'warm'
        else
          null

module.exports = helpers